name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repo
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}

      - name: print job details
        run: |
          echo "github_ref ${{ github.ref }}"
          echo "github_event_name ${{ github.event_name }}"

      - name: restore-yarn-cache
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/yarn.lock') }}

      - name: gg-webapp setup
        run: |
          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true yarn gg-webapp-install
          yarn gg-webapp-transpile
          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true yarn add @george-gillams/webapp@file:gg-webapp/dist

      - name: yarn install
        run: PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true yarn install --frozen-lockfile

      - name: lint
        run: yarn lint

      - name: jest test
        run: npm test

  # snapshot-test:
  #   runs-on: ubuntu-latest

  #   steps:
  #     # Checkout the repo
  #     - uses: actions/checkout@v2
  #       with:
  #         ref: ${{ github.head_ref }}

  #     - name: run snapshot tests
  #       run: |
  #         ./scripts/docker/prepare.sh
  #         ./scripts/docker/run-tests.sh

  #     - name: save snapshots
  #       if: failure()
  #       uses: actions/upload-artifact@v1
  #       with:
  #         name: bitmaps_reference
  #         path: backstop_data/bitmaps_reference

  deploy:
    runs-on: ubuntu-latest
    # needs: [test, snapshot-test]
    needs: [test]
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'

    steps:
      # Checkout the repo
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}

      - name: generate hash
        run: |
          HASH=$(date | md5sum | cut -d ' ' -f 1)
          ZIP_FILE_NAME="webapp-boilerplate---$HASH"
          echo "HASH=$HASH" >> $GITHUB_ENV
          echo "ZIP_FILE_NAME=$ZIP_FILE_NAME" >> $GITHUB_ENV

      - name: install system dependencies
        run: |
          sudo apt-get update
          sudo apt install -y qemu-user-static binfmt-support

      - name: build docker image
        env:
          GSUITE_APP_PASSWORD: ${{ secrets.GSUITE_APP_PASSWORD }}
          GSUITE_EMAIL: ${{ secrets.GSUITE_EMAIL }}
          NODE_ENV: ${{ secrets.NODE_ENV }}
          REDIS_URL: ${{ secrets.REDIS_URL }}
          SECRET_API_KEY: ${{ secrets.SECRET_API_KEY }}
        run: |
          echo "zipFileName ${{ env.ZIP_FILE_NAME }}"
          zipFileName=${{ env.ZIP_FILE_NAME }}
          /bin/bash ./scripts/docker/export-prod.sh $zipFileName

      - name: deploy
        run: |
          zipFileName=${{ env.ZIP_FILE_NAME }}
          zip -r $zipFileName.zip docker-image.tar meta.json
          echo "${{ secrets.EC2_RSA }}" > ./identityFile.txt
          chmod 400 ./identityFile.txt
          scp -o "StrictHostKeyChecking=no" -i ./identityFile.txt -r ./$zipFileName.zip ubuntu@ec2-13-40-134-151.eu-west-2.compute.amazonaws.com:/home/ubuntu/departure-lounge/

  release:
    runs-on: ubuntu-latest
    # needs: [test, snapshot-test]
    needs: [test]
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'

    steps:
      # Checkout the repo
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: restore-yarn-cache
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/yarn.lock') }}

      # We use a fresh checkout here so that we can authenticate with a personal access token.
      # This allows us to push new commits to a protected branch, which we cannot do with default GH action token.
      - name: Pull git repo
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "<>"
          git config --global credential.helper cache
          git clone https://${{secrets.PUBLISH_GH_TOKEN}}@github.com/georgegillams/webapp-boilerplate
          mv node_modules webapp-boilerplate/
          mv gg-webapp/node_modules webapp-boilerplate/gg-webapp/

      - name: npm install
        run: |
          cd webapp-boilerplate
          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true yarn install --frozen-lockfile
          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true yarn gg-webapp-install

      - name: release
        env:
          NPM_PUBLISH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}
        run: |
          cd webapp-boilerplate
          npm config set //registry.npmjs.org/:_authToken $NPM_PUBLISH_TOKEN
          yarn release
